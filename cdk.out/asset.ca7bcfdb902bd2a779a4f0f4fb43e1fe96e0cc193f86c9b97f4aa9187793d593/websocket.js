"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const jwt = require("jsonwebtoken");
const jwkToPem = require('jwk-to-pem');
const fs = require("fs");
class WebSocketServer {
    constructor() {
        this.db = new AWS.DynamoDB.DocumentClient({ region: process.env.AWS_REGION });
        if (process.env.TABLE_NAME) {
            this.tableName = process.env.TABLE_NAME;
        }
        else {
        }
    }
    log(requestId, callee, input, output, process, result) {
        console.log({ requestId, callee, input, output, result });
    }
    validateRequest(event) {
        var _a;
        return ((_a = event.requestContext) === null || _a === void 0 ? void 0 : _a.connectionId) ? { statusCode: 200, body: "" } : { statusCode: 500, body: 'Bad request: ' + JSON.stringify(new Error("Invalid connection")) };
    }
    generatePolicy(principalId, effect, resource) {
        let policy = {
            Version: "2012-10-17",
            Statement: [{
                    Effect: effect,
                    Action: "execute-api:Invoke",
                    Resource: resource
                }]
        };
        let authResponse = {
            principalId: principalId,
            policyDocument: policy,
            context: {
                stringKey: "stringval",
                numberKey: 123,
                booleanKey: true
            }
        };
        return authResponse;
    }
    async onConnect(event) {
        var _a;
        this.log(event.requestContext.requestId, this.onConnect.name, event);
        const validateResult = this.validateRequest(event);
        if (validateResult.statusCode === 200) {
            const putParams = {
                TableName: this.tableName,
                Item: {
                    connectionId: { S: (_a = event === null || event === void 0 ? void 0 : event.requestContext) === null || _a === void 0 ? void 0 : _a.connectionId }
                }
            };
            try {
                await this.db.put(putParams).promise();
                return { statusCode: 200, body: 'Connected.' };
            }
            catch (err) {
                return { statusCode: 500, body: 'Failed to connect: ' + JSON.stringify(err) };
            }
        }
        else {
            this.log(event.requestContext.requestId, this.onConnect.name, event, validateResult, this.validateRequest.name, false);
            return validateResult;
        }
    }
    async onDisconnect(event) {
        this.log(event.requestContext.requestId, this.onDisconnect.name, event);
        const validateResult = this.validateRequest(event);
        if (validateResult.statusCode === 200) {
            const deleteParams = {
                TableName: this.tableName,
                Key: {
                    connectionId: { S: event.requestContext.connectionId }
                }
            };
            try {
                await this.db.delete(deleteParams).promise();
                return { statusCode: 200, body: 'Disconnected.' };
            }
            catch (err) {
                return { statusCode: 500, body: 'Failed to disconnect: ' + JSON.stringify(err) };
            }
        }
        else {
            return validateResult;
        }
    }
    async onMessage(event) {
        var _a;
        this.log(event.requestContext.requestId, this.onMessage.name, event);
        const validateResult = this.validateRequest(event);
        if (validateResult.statusCode !== 200)
            return validateResult;
        let connectionData;
        try {
            connectionData = await this.db.scan({ TableName: this.tableName, ProjectionExpression: 'connectionId' }).promise();
        }
        catch (e) {
            return { statusCode: 500, body: e.stack };
        }
        const apigwManagementApi = new AWS.ApiGatewayManagementApi({
            apiVersion: '2018-11-29',
            endpoint: event.requestContext.domainName + '/' + event.requestContext.stage
        });
        if (event.body) {
            const postData = JSON.parse(event.body).data;
            const postCalls = (_a = connectionData === null || connectionData === void 0 ? void 0 : connectionData.Items) === null || _a === void 0 ? void 0 : _a.map(async ({ connectionId }) => {
                try {
                    await apigwManagementApi.postToConnection({ ConnectionId: connectionId, Data: postData }).promise();
                }
                catch (e) {
                    if (e.statusCode === 410) {
                        console.log(`Found stale connection, deleting ${connectionId}`);
                        await this.db.delete({ TableName: this.tableName, Key: { connectionId } }).promise();
                    }
                    else {
                        throw e;
                    }
                }
            });
            try {
                if (postCalls) {
                    await Promise.all(postCalls);
                }
            }
            catch (e) {
                return { statusCode: 500, body: e.stack };
            }
            return { statusCode: 200, body: 'Data sent.' };
        }
        else {
            return { statusCode: 500, body: "Empty message" };
        }
    }
    async authorizer(event) {
        var _a;
        //https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json
        this.log((_a = event.requestContext) === null || _a === void 0 ? void 0 : _a.requestId, this.authorizer.name, event);
        return new Promise((ok, fail) => {
            var _a;
            let token = (_a = event === null || event === void 0 ? void 0 : event.queryStringParameters) === null || _a === void 0 ? void 0 : _a.token;
            if (token) {
                let jwk = JSON.parse(fs.readFileSync(`/assets/${process.env.ENVIRONMENT}.jwk`.toLowerCase()).toString());
                const pem = jwkToPem(jwk);
                jwt.verify(token, pem, (err, decoded) => {
                    var _a;
                    if (err) {
                        this.log((_a = event.requestContext) === null || _a === void 0 ? void 0 : _a.requestId, this.authorizer.name, event, err, "verify", false);
                        ok(this.generatePolicy("User", "Deny", event.methodArn));
                    }
                    else {
                        ok(this.generatePolicy("User", "Allow", event.methodArn));
                    }
                });
            }
            else {
                ok(this.generatePolicy("User", "Deny", event.methodArn));
            }
        });
    }
}
const websocket = new WebSocketServer();
module.exports.onConnect = websocket.onConnect.bind(websocket);
module.exports.onDisconnect = websocket.onDisconnect.bind(websocket);
module.exports.onMessage = websocket.onMessage.bind(websocket);
module.exports.authorizer = websocket.authorizer.bind(websocket);
//# sourceMappingURL=data:application/json;base64,